import 模型数据
import 透视实现
import 渲染实现
import 摄像机
import turtle

# 配置选项
启用摄像机控制 = True  # 设置为False可以禁用摄像机功能

模型文件列表 = ['模型/场景.obj']

if 启用摄像机控制:
    # 摄像机模式
    摄像机 = 摄像机.摄像机(位置=[0, 0, 8], 目标=[0, 0, 0])
    
    # 预加载模型数据
    预加载模型数据 = {}
    for 文件 in 模型文件列表:
        预加载模型数据[文件] = 模型数据.读取文件(文件)
    
    def 渲染场景():
        """渲染整个场景"""
        渲染实现.帧缓存 = []  # 清空帧缓存
        
        for 文件 in 模型文件列表:
            面顶点列表 = 预加载模型数据[文件]
            for 面顶点 in 面顶点列表:
                # 获取摄像机视图矩阵
                视图矩阵 = 摄像机.获取视图矩阵()
                # 应用透视投影和视图变换
                三维顶点 = 透视实现.透视(面顶点, 视图矩阵=视图矩阵)
                # 提取每个顶点的前两个坐标(x, y)
                二维顶点 = [[顶点[0], 顶点[1]] for 顶点 in 三维顶点]
                渲染实现.添加到帧缓存(二维顶点)
    
        # 渲染帧
        渲染实现.渲染帧()
    
    def 处理按键():
        """处理键盘输入"""
        def 开始向前():
            摄像机.开始向前移动()
        
        def 停止向前():
            摄像机.停止向前移动()
        
        def 开始向后():
            摄像机.开始向后移动()
        
        def 停止向后():
            摄像机.停止向后移动()
        
        def 开始向左():
            摄像机.开始向左移动()
        
        def 停止向左():
            摄像机.停止向左移动()
        
        def 开始向右():
            摄像机.开始向右移动()
        
        def 停止向右():
            摄像机.停止向右移动()
        
        def 开始向上():
            摄像机.开始向上移动()
        
        def 停止向上():
            摄像机.停止向上移动()
        
        def 开始向下():
            摄像机.开始向下移动()
        
        def 停止向下():
            摄像机.停止向下移动()
        
        def 左旋转():
            摄像机.左旋转()
        
        def 右旋转():
            摄像机.右旋转()
        
        def 退出():
            turtle.bye()
        
        def 重置摄像机():
            摄像机.设置位置([0, 0, 8])
            摄像机.设置目标([0, 0, 0])
            print("摄像机已重置到初始位置")
            print(f"摄像机位置: {摄像机.获取位置()}")
            print(f"摄像机目标: {摄像机.获取目标()}")
        
        def 切换模型():
            """切换显示的模型"""
            global 模型文件列表
            当前索引 = 模型文件列表.index(模型文件列表[0])
            下一个索引 = (当前索引 + 1) % len(['模型/场景.obj', '模型/立方体.obj', '模型/球.obj', '模型/面.obj'])
            模型文件列表 = [['模型/场景.obj', '模型/立方体.obj', '模型/球.obj', '模型/面.obj'][下一个索引]]
            
            # 重新预加载模型数据
            global 预加载模型数据
            预加载模型数据 = {}
            for 文件 in 模型文件列表:
                预加载模型数据[文件] = 模型数据.读取文件(文件)
            
            print(f"已切换到模型: {模型文件列表[0]}")
        
        # 绑定按键
        屏幕 = turtle.Screen()
        # 移动按键（按住）- WASD标准控制
        屏幕.onkeypress(开始向前, "w")
        屏幕.onkeyrelease(停止向前, "w")
        屏幕.onkeypress(开始向后, "s")
        屏幕.onkeyrelease(停止向后, "s")
        屏幕.onkeypress(开始向左, "a")
        屏幕.onkeyrelease(停止向左, "a")
        屏幕.onkeypress(开始向右, "d")
        屏幕.onkeyrelease(停止向右, "d")
        
        # 垂直移动 - 空格和Ctrl更符合直觉
        屏幕.onkeypress(开始向上, "space")
        屏幕.onkeyrelease(停止向上, "space")
        屏幕.onkeypress(开始向下, "Control_L")
        屏幕.onkeyrelease(停止向下, "Control_L")
        
        # 备用垂直移动按键（如果用户不习惯空格和Ctrl）
        屏幕.onkeypress(开始向上, "r")
        屏幕.onkeyrelease(停止向上, "r")
        屏幕.onkeypress(开始向下, "f")
        屏幕.onkeyrelease(停止向下, "f")
        
        # 旋转按键（按住）- 主要使用方向键控制
        屏幕.onkeypress(摄像机.开始左旋转, "Left")
        屏幕.onkeyrelease(摄像机.停止左旋转, "Left")
        屏幕.onkeypress(摄像机.开始右旋转, "Right")
        屏幕.onkeyrelease(摄像机.停止右旋转, "Right")
        屏幕.onkeypress(摄像机.开始向上看, "Up")  # 上箭头控制向上看
        屏幕.onkeyrelease(摄像机.停止向上看, "Up")
        屏幕.onkeypress(摄像机.开始向下看, "Down")  # 下箭头控制向下看
        屏幕.onkeyrelease(摄像机.停止向下看, "Down")

        
        # 功能按键
        屏幕.onkey(重置摄像机, "r")
        屏幕.onkey(切换模型, "m")
        屏幕.onkey(退出, "Escape")
        
   
        屏幕.listen()
    

    渲染实现.初始化窗口()
    

    渲染场景()

    处理按键()
    

    print(f"\n摄像机位置: {摄像机.获取位置()}")
    print(f"摄像机目标: {摄像机.获取目标()}")
    print("当前模型:", 模型文件列表[0])

    def 循环():
        try:
            if 启用摄像机控制:
                摄像机.更新移动()
                渲染场景()

            if turtle.TK:
                turtle.ontimer(循环, 1)  # 约60FPS
        except turtle.Terminator:
            # 窗口已关闭，正常退出
            pass
    循环()
    
    turtle.mainloop()

else:
    for 文件 in 模型文件列表:
        面顶点列表 = 模型数据.读取文件(文件)
        for 面顶点 in 面顶点列表:
            三维顶点 = 透视实现.透视(面顶点)

            二维顶点 = [[顶点[0], 顶点[1]] for 顶点 in 三维顶点]
            渲染实现.添加到帧缓存(二维顶点)
    
    渲染实现.渲染帧()
    turtle.mainloop()